/*
    This is a N^2 solution, in which we are sorting the array at first and 
    then fixing the value of a & applying 2Sum on sorted array.
*/
class Solution {
public:
    vector<vector<int>> twoSumSorted(vector<int>& nums, int st, int end, int target) {
        vector<vector<int>> ans;
        
        while(st < end) {
            int sum = nums[st] + nums[end];
            if(sum == target) {
                ans.push_back({nums[st], nums[end], -target});
                int temp1 = nums[st], temp2 = nums[end];
                while(st < end && temp2 == nums[end]) end--;
                while(st < end && temp1 == nums[st]) st++;
            }
            else if(sum > target) {
                end--;
            }
            else {
                st++;
            }
        }
        
        return ans;
    }
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        
        int i = 0;
        while(i < n) {
            int tar = -nums[i];
            auto res = twoSumSorted(nums, i + 1, n - 1, -nums[i]);
            ans.insert(ans.end(), res.begin(), res.end());
            
            int temp = nums[i];
            while(i < n && temp == nums[i]) i++;
        }
        
        return ans;
    }
};
